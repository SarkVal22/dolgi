import logging
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CallbackQueryHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
import random

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
SPREADSHEET_ID = os.getenv('SPREADSHEET_ID')
GOOGLE_CREDENTIALS = json.loads(os.getenv('GOOGLE_CREDENTIALS'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDENTIALS, scope)
client = gspread.authorize(credentials)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# –°–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ –∏ user_id
user_ids = {
    '–ê—Ä—Å–µ–Ω': '@AKukhmazov',
    '–ê–Ω–¥—Ä–µ–π –ñ': '@zhandnab',
    '–ê–Ω–¥—Ä–µ–π –ê': '@Alenin_Andrey',
    '–í–∞–ª–µ—Ä–∞ –ë': '@valerkas',
    '–í–∞–ª–µ—Ä–∞ –°': '@ValeriySark',
    '–ó–µ–≤—Å': '@Zeus7717',
    '–ú–∞—Ä–∞—Ç': '@Marat1k77',
    '–î–∞–Ω–∑–∞–Ω': '@gunndanz',
    '–ê–Ω–¥—Ä–µ–π –°': '@Premove',
    '–ï–≤–≥–µ–Ω–∏–π –ê': '@abram88',
    '–ï–≤–≥–µ–Ω–∏–π –ú': '@Hate_m11',
    '–ú–∏—Ö–∞–∏–ª –ë': '@pryanni',
    '–ö–æ—Å—Ç—è': '@hlopkost',
    '–ê—Ä—Ç–µ–º –ì': '@Artem_Galaktionov22',
    '–ë–æ—Ä–∏—Å': '@Pimienti',
    '–ö–∏—Ä–∏–ª–ª': '@Batko2003',
    '–ï–≥–æ—Ä': '@yagr55',
    '–í–ª–∞–¥': '@blvvld',
    '–ú–∞—Ä–∏—è': '@thaidancer',
    '–°—Ç–∞—Å': '@s4fbrc4',
    '–ò–º—è1': '@user_id1',
    '–ò–º—è2': '@user_id2',
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞ –∏ –∏—Ö user_id
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
def generate_hand():
    suits = ['‚ô†', '‚ô£', '‚ô¶', '‚ô•']
    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    deck = [f'{rank}{suit}' for suit in suits for rank in ranks]
    random.shuffle(deck)
    return [deck.pop(), deck.pop()]

def evaluate_hand(cards):
    ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
             'J': 11, 'Q': 12, 'K': 13, 'A': 14}
    hand = sorted(cards, key=lambda card: ranks[card[:-1]], reverse=True)
    return hand

# –ö–æ–º–∞–Ω–¥–∞ "start"
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /dolgi, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–æ–ª–∂–Ω–∏–∫–æ–≤.')

# –ö–æ–º–∞–Ω–¥–∞ "dolgi"
async def get_debts(update: Update, context: CallbackContext) -> None:
    debts = sheet.row_values(560)  # –ò–º–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ 560)
    amounts = sheet.row_values(562)  # –î–æ–ª–≥–∏ (—Å—Ç—Ä–æ–∫–∞ 562)

    message = "–î–û–õ–ì–ò ü§°\n\n"
    for name, amount in zip(debts, amounts):
        if name == "–ü—Ä–æ–≤–µ—Ä–∫–∞":
            continue
        try:
            amount = int(amount.replace('\xa0', ''))  # –£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            if amount < 0:
                if name in user_ids:
                    name = user_ids[name]  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å user_id –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏
                message += f"{name} - {-amount}\n"
        except ValueError:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ
            continue

    if message == "–î–û–õ–ì–ò ü§°\n\n":
        message = "–ù–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π"

    await update.message.reply_text(message, parse_mode='HTML')

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ "komu_kidat"
async def komu_kidat(update: Update, context: CallbackContext) -> None:
    debts = sheet.row_values(560)  # –ò–º–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ 560)
    amounts = sheet.row_values(562)  # –î–æ–ª–≥–∏ (—Å—Ç—Ä–æ–∫–∞ 562)
    phones = sheet.row_values(563)  # –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (—Å—Ç—Ä–æ–∫–∞ 563)
    banks = sheet.row_values(564)  # –ë–∞–Ω–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 564)

    message = "–ö–û–ú–£ –ü–ï–†–ï–í–û–î–ò–¢–¨ üí∏\n\n"
    for name, amount, phone, bank in zip(debts, amounts, phones, banks):
        if name == "–ü—Ä–æ–≤–µ—Ä–∫–∞":
            continue
        try:
            amount = int(amount.replace('\xa0', ''))  # –£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            if amount > 0:  # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –≤–º–µ—Å—Ç–æ user_id –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É
                message += f"{name}, {phone}, {bank}, {amount} \n"
        except ValueError:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ
            continue

    if message == "–ö–û–ú–£ –ü–ï–†–ï–í–û–î–ò–¢–¨ üí∏\n\n":
        message = "–ù–µ—Ç –ø–ª—é—Å–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"

    await update.message.reply_text(message, parse_mode='HTML')

# –ö–æ–º–∞–Ω–¥–∞ "ruletka"
async def ruletka(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("–£—á–∞—Å—Ç–≤—É—é", callback_data='join')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫–µ!', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user

    if 'players' not in context.chat_data:
        context.chat_data['players'] = []

    if len(context.chat_data['players']) < 2:
        if user.id not in context.chat_data['players']:
            context.chat_data['players'].append(user.id)
            await query.answer()
            await query.edit_message_text(text=f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. ({len(context.chat_data['players'])}/2)")
        else:
            await query.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä—É–ª–µ—Ç–∫–µ.")
    else:
        await query.answer("–†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.")

    if len(context.chat_data['players']) == 2:
        player1 = context.chat_data['players'][0]
        player2 = context.chat_data['players'][1]

        # –†–æ–∑—ã–≥—Ä—ã—à –∫–∞—Ä—Ç
        hand1 = generate_hand()
        hand2 = generate_hand()
        community_cards = [generate_hand() for _ in range(5)]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = []
        messages.append(f"–ö–∞—Ä–º–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n–ò–≥—Ä–æ–∫ 1: {hand1}\n–ò–≥—Ä–æ–∫ 2: {hand2}\n")
        messages.append(f"–§–ª–æ–ø: {community_cards[0]}\n")
        messages.append(f"–¢–µ—Ä–Ω: {community_cards[1]}\n")
        messages.append(f"–†–∏–≤–µ—Ä: {community_cards[2]}\n")
        
        # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–ü—Ä–∏–º–µ—Ä, –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–∫–∏ —Ä—É–∫)
        winner = random.choice([player1, player2])
        messages.append(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner} —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π {evaluate_hand(hand1 + community_cards) if winner == player1 else evaluate_hand(hand2 + community_cards)}")

        for msg in messages:
            await update.message.reply_text(msg)

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
        context.chat_data['players'] = []

def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("dolgi", get_debts))
    application.add_handler(CommandHandler("komu_kidat", komu_kidat))
    application.add_handler(CommandHandler("ruletka", ruletka))
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_poll
