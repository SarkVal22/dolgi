import logging
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
import random
import asyncio

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
SPREADSHEET_ID = os.getenv('SPREADSHEET_ID')
GOOGLE_CREDENTIALS = json.loads(os.getenv('GOOGLE_CREDENTIALS'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDENTIALS, scope)
client = gspread.authorize(credentials)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# –°–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ –∏ user_id
user_ids = {
    '–ê—Ä—Å–µ–Ω': '@AKukhmazov',
    '–ê–Ω–¥—Ä–µ–π –ñ': '@zhandnab',
    '–ê–Ω–¥—Ä–µ–π –ê': '@Alenin_Andrey',
    '–í–∞–ª–µ—Ä–∞ –ë': '@valerkas',
    '–í–∞–ª–µ—Ä–∞ –°': '@ValeriySark',
    '–ó–µ–≤—Å': '@Zeus7717',
    '–ú–∞—Ä–∞—Ç': '@Marat1k77',
    '–î–∞–Ω–∑–∞–Ω': '@gunndanz',
    '–ê–Ω–¥—Ä–µ–π –°': '@Premove',
    '–ï–≤–≥–µ–Ω–∏–π –ê': '@abram88',
    '–ï–≤–≥–µ–Ω–∏–π –ú': '@Hate_m11',
    '–ú–∏—Ö–∞–∏–ª –ë': '@pryanni',
    '–ö–æ—Å—Ç—è': '@hlopkost',
    '–ê—Ä—Ç–µ–º –ì': '@Artem_Galaktionov22',
    '–ë–æ—Ä–∏—Å': '@Pimienti',
    '–ö–∏—Ä–∏–ª–ª': '@Batko2003',
    '–ï–≥–æ—Ä': '@yagr55',
    '–í–ª–∞–¥': '@blvvld',
    '–ú–∞—Ä–∏—è': '@thaidancer',
    '–°—Ç–∞—Å': '@s4fbrc4',
    '–ò–º—è1': '@user_id1',
    '–ò–º—è2': '@user_id2',
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞ –∏ –∏—Ö user_id
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä—É–ª–µ—Ç–∫–∏
roulette_participants = []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–æ–∫–µ—Ä–∞
def rank_cards(hand):
    values = sorted(['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'].index(card[:-1]) for card in hand], reverse=True)
    suits = [card[-1] for card in hand]
    return values, suits

def is_flush(suits):
    return len(set(suits)) == 1

def is_straight(values):
    return values == list(range(values[0], values[0] - 5, -1))

def evaluate_hand(hand):
    values, suits = rank_cards(hand)
    if is_straight(values) and is_flush(suits):
        return "ROYAL FLUSH" if values[0] == 12 else "STRAIGHT FLUSH"
    if len(set(values)) == 2:
        return "FOUR OF A KIND" if values.count(values[0]) in [1, 4] else "FULL HOUSE"
    if is_flush(suits):
        return "FLUSH"
    if is_straight(values):
        return "STRAIGHT"
    if len(set(values)) == 3:
        return "THREE OF A KIND" if values.count(values[0]) in [1, 3] else "TWO PAIR"
    if len(set(values)) == 4:
        return "ONE PAIR"
    return "HIGH CARD"

def hand_strength(hand):
    return random.randint(1, 100)  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /dolgi, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–æ–ª–∂–Ω–∏–∫–æ–≤.')

async def get_debts(update: Update, context: CallbackContext) -> None:
    debts = sheet.row_values(560)  # –ò–º–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ 560)
    amounts = sheet.row_values(562)  # –î–æ–ª–≥–∏ (—Å—Ç—Ä–æ–∫–∞ 562)

    message = "üìâ –î–û–õ–ì–ò ü§°\n\n"
    for name, amount in zip(debts, amounts):
        if name == "–ü—Ä–æ–≤–µ—Ä–∫–∞":
            continue
        try:
            amount = int(amount.replace('\xa0', ''))  # –£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            if amount < 0:
                if name in user_ids:
                    name = user_ids[name]  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å user_id –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏
                message += f"{name} - {-amount}\n"
        except ValueError:
            continue

    if message == "üìâ –î–û–õ–ì–ò ü§°\n\n":
        message = "–ù–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π"

    await update.message.reply_text(message, parse_mode='HTML')

async def komu_kidat(update: Update, context: CallbackContext) -> None:
    debts = sheet.row_values(560)  # –ò–º–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ 560)
    amounts = sheet.row_values(562)  # –î–æ–ª–≥–∏ (—Å—Ç—Ä–æ–∫–∞ 562)
    phones = sheet.row_values(563)  # –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (—Å—Ç—Ä–æ–∫–∞ 563)
    banks = sheet.row_values(564)  # –ë–∞–Ω–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 564)

    message = "üí∏ –ö–û–ú–£ –ü–ï–†–ï–í–û–î–ò–¢–¨ üí∏\n\n"
    for name, amount, phone, bank in zip(debts, amounts, phones, banks):
        if name == "–ü—Ä–æ–≤–µ—Ä–∫–∞":
            continue
        try:
            amount = int(amount.replace('\xa0', ''))  # –£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            if amount > 0:  # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                message += f"{name}, {phone}, {bank}, {amount} \n"
        except ValueError:
            continue

    if message == "üí∏ –ö–û–ú–£ –ü–ï–†–ï–í–û–î–ò–¢–¨ üí∏\n\n":
        message = "–ù–µ—Ç –ø–ª—é—Å–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"

    await update.message.reply_text(message, parse_mode='HTML')

async def ruletka(update: Update, context: CallbackContext) -> None:
    global roulette_participants
    roulette_participants = []

    keyboard = [[InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data='join')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        'üÉè –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä—É–ª–µ—Ç–∫–µ üÉè', 
        reply_markup=reply_markup
    )

async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user

    logging.info(f"Button pressed by {user.id} ({user.full_name})")

    if len(roulette_participants) >= 2:
        await query.answer(text="üõë –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.")
        return
    
    if user.id not in [p['id'] for p in roulette_participants]:
        roulette_participants.append({'id': user.id, 'name': user.full_name})
        await query.answer(text="‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ!")

    logging.info(f"Current participants: {roulette_participants}")

    if len(roulette_participants) == 2:
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã
        await query.message.edit_text(
            text=f"üéâ –£—á–∞—Å—Ç–≤—É—é—Ç:\n1. {roulette_participants[0]['name']} {user_ids.get(roulette_participants[0]['name'], '')}\n2. {roulette_participants[1]['name']} {user_ids.get(roulette_participants[1]['name'], '')}\n\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–¥–∞—á—É...",
            reply_markup=None
        )

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –∏ —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        deck = [f'{rank}{suit}' for suit in suits for rank in ranks]
        random.shuffle(deck)

        def deal_hand():
            return [deck.pop(), deck.pop()]

        # –†–∞–∑–¥–∞–µ–º —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞–º
        player1_hand = deal_hand()
        player2_hand = deal_hand()

        # –°–æ–∑–¥–∞–µ–º —Ñ–ª–æ–ø, —Ç–µ—Ä–Ω –∏ —Ä–∏–≤–µ—Ä
        community_cards = []
        for _ in range(3):
            community_cards.append(deck.pop())
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üÉè –§–ª–æ–ø: {' '.join(community_cards)}"
        )
        await asyncio.sleep(5)

        community_cards.append(deck.pop())
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üÉè –¢—ë—Ä–Ω: {' '.join(community_cards)}"
        )
        await asyncio.sleep(5)

        community_cards.append(deck.pop())
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üÉè –†–∏–≤–µ—Ä: {' '.join(community_cards)}"
        )
        await asyncio.sleep(5)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        player1_hand += community_cards
        player2_hand += community_cards

        player1_hand_type = evaluate_hand(player1_hand)
        player2_hand_type = evaluate_hand(player2_hand)

        player1_strength = hand_strength(player1_hand)
        player2_strength = hand_strength(player2_hand)

        if player1_strength > player2_strength:
            winner = roulette_participants[0]
            winner_hand_type = player1_hand_type
        elif player1_strength < player2_strength:
            winner = roulette_participants[1]
            winner_hand_type = player2_hand_type
        else:
            winner = None
            winner_hand_type = "–ù–∏—á—å—è"

        if winner:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['name']} —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π {winner_hand_type}!\nüÉè –†—É–∫–∏:\n1. {player1_hand} (–ò–≥—Ä–æ–∫ 1)\n2. {player2_hand} (–ò–≥—Ä–æ–∫ 2)"
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"ü§ù –ù–∏—á—å—è! –†—É–∫–∏:\n1. {roulette_participants[0]['name']}: {player1_hand}\n2. {roulette_participants[1]['name']}: {player2_hand}"
            )

        roulette_participants = []

def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("dolgi", get_debts))
    application.add_handler(CommandHandler("komu_kidat", komu_kidat))
    application.add_handler(CommandHandler("ruletka", ruletka))
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
