import logging
import nest_asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
from collections import namedtuple
from oauth2client.service_account import ServiceAccountCredentials
import gspread
import os
import json

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
SPREADSHEET_ID = os.getenv('SPREADSHEET_ID')
GOOGLE_CREDENTIALS = json.loads(os.getenv('GOOGLE_CREDENTIALS'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDENTIALS, scope)
client = gspread.authorize(credentials)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
participants = []
MAX_PARTICIPANTS = 2

Card = namedtuple('Card', ['suit', 'rank'])

# –ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç
SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
deck = [Card(suit, rank) for suit in SUITS for rank in RANKS]

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤ –ø–æ–∫–µ—Ä–µ
def hand_rank(hand):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä—É–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä—É–∫."""
    values = sorted(['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'].index(card.rank) for card in hand], reverse=True)
    suits = [card.suit for card in hand]
    is_flush = len(set(suits)) == 1
    is_straight = values == list(range(values[0], values[0] - 5, -1))
    if values == [12, 3, 2, 1, 0]:  # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è —Å—Ç—Ä–∏—Ç–∞ –¥–æ —Ç—É–∑–∞
        values = [4, 3, 2, 1, 0]
    counts = {value: values.count(value) for value in values}
    if is_straight and is_flush:
        return (8, values)
    elif 4 in counts.values():
        return (7, counts)
    elif 3 in counts.values() and 2 in counts.values():
        return (6, counts)
    elif is_flush:
        return (5, values)
    elif is_straight:
        return (4, values)
    elif 3 in counts.values():
        return (3, counts)
    elif list(counts.values()).count(2) == 2:
        return (2, counts)
    elif 2 in counts.values():
        return (1, counts)
    else:
        return (0, values)

def get_winner(hands):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä—É–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏."""
    ranked_hands = [(hand_rank(hand), hand) for hand in hands]
    ranked_hands.sort(reverse=True)
    return ranked_hands[0]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–ª–≥–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∏–µ–º
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /dolgi, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–æ–ª–∂–Ω–∏–∫–æ–≤.')

async def get_debts(update: Update, context: CallbackContext) -> None:
    debts = sheet.row_values(560)  # –ò–º–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ 560)
    amounts = sheet.row_values(562)  # –î–æ–ª–≥–∏ (—Å—Ç—Ä–æ–∫–∞ 562)

    message = "–î–û–õ–ì–ò ü§°\n\n"
    for name, amount in zip(debts, amounts):
        if name == "–ü—Ä–æ–≤–µ—Ä–∫–∞":
            continue
        try:
            amount = int(amount.replace('\xa0', ''))  # –£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            if amount < 0:
                message += f"{name} - {-amount}\n"
        except ValueError:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ
            continue

    if message == "–î–û–õ–ì–ò ü§°\n\n":
        message = "–ù–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π"

    await update.message.reply_text(message, parse_mode='HTML')

async def komu_kidat(update: Update, context: CallbackContext) -> None:
    debts = sheet.row_values(560)  # –ò–º–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ 560)
    amounts = sheet.row_values(562)  # –î–æ–ª–≥–∏ (—Å—Ç—Ä–æ–∫–∞ 562)
    phones = sheet.row_values(563)  # –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (—Å—Ç—Ä–æ–∫–∞ 563)
    banks = sheet.row_values(564)  # –ë–∞–Ω–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 564)

    message = "–ö–û–ú–£ –ü–ï–†–ï–í–û–î–ò–¢–¨ üí∏\n\n"
    for name, amount, phone, bank in zip(debts, amounts, phones, banks):
        if name == "–ü—Ä–æ–≤–µ—Ä–∫–∞":
            continue
        try:
            amount = int(amount.replace('\xa0', ''))  # –£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            if amount > 0:  # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                message += f"{name}, {phone}, {bank}, {amount} \n"
        except ValueError:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ
            continue

    if message == "–ö–û–ú–£ –ü–ï–†–ï–í–û–î–ò–¢–¨ üí∏\n\n":
        message = "–ù–µ—Ç –ø–ª—é—Å–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"

    await update.message.reply_text(message, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä—É–ª–µ—Ç–∫–µ", callback_data='register')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä—É–ª–µ—Ç–∫–µ:', reply_markup=reply_markup)

async def register_for_roulette(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user
    if user.id in [p['id'] for p in participants]:
        await query.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
        return

    if len(participants) < MAX_PARTICIPANTS:
        participants.append({'id': user.id, 'name': user.username})
        await query.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ')
        if len(participants) == MAX_PARTICIPANTS:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–∞—á—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–≤—É—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await start_roulette(update, context)
    else:
        await query.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.')

async def start_roulette(update: Update, context: CallbackContext) -> None:
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–∑–¥–∞—á–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–≤—É—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if len(participants) < MAX_PARTICIPANTS:
        return

    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants_names = ", ".join([f"@{p['name']}" for p in participants])
    message = f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants_names}\n\n–†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! üé≤"
    await update.message.reply_text(message)

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É –∏ —Ä–∞–∑–¥–∞–µ–º –ø–æ –¥–≤–µ –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
    random.shuffle(deck)
    hands = {p['id']: [deck.pop(), deck.pop()] for p in participants}

    # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–∑–¥–∞—á–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    flop = [deck.pop() for _ in range(3)]
    turn = deck.pop()
    river = deck.pop()

    def format_hand(hand):
        return ' '.join(f"{card.rank}{card.suit}" for card in hand)

    # –û–±—ä—è–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
    hand_messages = [f"@{p['name']} –ø–æ–ª—É—á–∏–ª {format_hand(hand)}" for p, hand in zip(participants, hands.values())]
    await update.message.reply_text("\n".join(hand_messages))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–ª–æ–ø, —Ç–µ—Ä–Ω –∏ —Ä–∏–≤–µ—Ä
    await update.message.reply_text(f"–§–ª–æ–ø: {format_hand(flop)}")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–¢–µ—Ä–Ω: {format_hand([turn])}")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–†–∏–≤–µ—Ä: {format_hand([river])}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    all_hands = [hand + flop + [turn, river] for hand in hands.values()]
    winner = get_winner(all_hands)
    winner_index = all_hands.index(winner[1])
    winner_name = participants[winner_index]['name']
    hand_description = format_hand(winner[1])
    await update.message.reply_text(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner_name}\n–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {hand_description}")

def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("dolgi", get_debts))
    application.add_handler(CommandHandler("komu_kidat", komu_kidat))
    application.add_handler(CallbackQueryHandler(register_for_roulette, pattern='register'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
